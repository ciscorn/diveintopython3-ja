en:<p>You are here: <a href=index.html>Home</a> <span class=u>&#8227;</span> <a href=table-of-contents.html#iterators>Dive Into Python 3</a> <span class=u>&#8227;</span>
ja:<p>現在地: <a href=index.html>ホーム</a> <span class=u>&#8227;</span> <a href=table-of-contents.html#iterators>Dive Into Python 3</a> <span class=u>&#8227;</span>


en:<title>Classes &amp; Iterators - Dive Into Python 3</title>
ja:<title>クラスとイテレータ - Dive Into Python 3 日本語版</title>


en:<h1>Classes <i class=baa>&amp;</i> Iterators</h1>
ja:<h1>クラスとイテレータ</h1>


en:<p><span class=u>&#x275D;</span> East is East, and West is West, and never the twain shall meet. <span class=u>&#x275E;</span><br>&mdash; <a href=http://en.wikiquote.org/wiki/Rudyard_Kipling>Rudyard Kipling</a>
ja:<p><span class=u>&#x275D;</span> 東は東、西は西、二つは決して交わらない。<span class=u>&#x275E;</span><br>&mdash; <a href=http://en.wikiquote.org/wiki/Rudyard_Kipling>ラディヤード・キプリング</a>


en:<p class=f>Iterators are the &#8220;secret sauce&#8221; of Python 3. They&#8217;re everywhere, underlying everything, always just out of sight. <a href=comprehensions.html>Comprehensions</a> are just a simple form of <i>iterators</i>. Generators are just a simple form of <i>iterators</i>. A function that <code>yield</code>s values is a nice, compact way of building an iterator without building an iterator. Let me show you what I mean by that.
ja:<p class=f>イテレータはPython 3の「隠し味」だ。イテレーターはどんなところにもいて、あらゆるものの礎をなしているが、その姿はいつも目に見えない。<a href=comprehensions.html>内包表記</a>は<em>イテレータ</em>の単純形に過ぎないし、ジェネレータも<em>イテレータ</em>の単純形に過ぎない。値を<code>yield</code>する関数というのは、イテレータを組み立てることなしにイテレータを作るコンパクトで上手い方法なのだ。私が何を言っているのかについて説明していこう。


en:<p>Remember <a href=generators.html#a-fibonacci-generator>the Fibonacci generator</a>? Here it is as a built-from-scratch iterator:
ja:<p><a href=generators.html#a-fibonacci-generator>フィボナッチジェネレータ</a>を覚えているだろうか？ あれをゼロから作ったイテレータにすると以下のようになる：


en:<p class=d>[<a href=examples/fibonacci2.py>download <code>fibonacci2.py</code></a>]
ja:<p class=d>[<a href=examples/fibonacci2.py><code>fibonacci2.py</code>をダウンロードする</a>]


en:<p>Let&#8217;s take that one line at a time.
ja:<p>それでは一行ずつ見ていこう。


en:<p><code>class</code>? What&#8217;s a class?
ja:<p><code>class</code>？ クラスって何だ？


en:<h2 id=defining-classes>Defining Classes</h2>
ja:<h2 id=defining-classes>クラスを定義する</h2>


en:<p>Python is fully object-oriented: you can define your own classes, inherit from your own or built-in classes, and instantiate the classes you&#8217;ve defined.
ja:<p>Pythonは完全にオブジェクト指向の言語なので、独自のクラスを定義したり、自作のクラスや組み込みのクラスを継承したり、自分で定義したクラスをインスタンス化したりできる。


en:<p>Defining a class in Python is simple. As with functions, there is no separate interface definition. Just define the class and start coding. A Python class starts with the reserved word <code>class</code>, followed by the class name. Technically, that&#8217;s all that&#8217;s required, since a class doesn&#8217;t need to inherit from any other class.
ja:<p>Pythonではクラスを簡単に定義できる。関数でもそうだったように、クラスを定義する場所が他と区別されているなどということはない。ただクラスを定義して、コードを書き始めよう。Pythonのクラス定義は、<code>class</code>という予約語から始まり、その後ろにクラス名を書く。形の上で言えば、クラスは別に他のクラスを継承しなくてもよいので、定義するのに最低限必要なものはこれだけだ。


en:<li>The name of this class is <code>PapayaWhip</code>, and it doesn&#8217;t inherit from any other class. Class names are usually capitalized, <code>EachWordLikeThis</code>, but this is only a convention, not a requirement.
ja:<li>このクラスの名前は<code>PapayaWhip</code>であり、このクラスは他のクラスを継承していない。クラス名は、<code>EachWordLikeThis</code>のように各単語の先頭を大文字にするのが普通だ。ただしこれは単なる慣例であり、要求ではない。


en:<li>You probably guessed this, but everything in a class is indented, just like the code within a function, <code>if</code> statement, <code>for</code> loop, or any other block of code. The first line not indented is outside the class.
ja:<li>ご想像の通り、クラスの中にあるものは、関数、<code>if</code>文、<code>for</code>ループ、その他すべてのコードブロックと同様に、すべてインデントされる。


en:<p>This <code>PapayaWhip</code> class doesn&#8217;t define any methods or attributes, but syntactically, there needs to be something in the definition, thus the <code>pass</code> statement. This is a Python reserved word that just means &#8220;move along, nothing to see here&#8221;. It&#8217;s a statement that does nothing, and it&#8217;s a good placeholder when you&#8217;re stubbing out functions or classes.
ja:<p>この<code>PapayaWhip</code>クラスはメソッドや属性を一切定義していないが、構文上は定義の中に何かが存在する必要があるため、この<code>pass</code>文を置いている。<code>pass</code>文はPythonの予約語であり、「そのまま進んでくれ、ここには何もないよ」という意味を表す。この文は何も行わないので、関数やクラスのスタブを作るときに便利なプレースホルダとして使うことができる。


en:<p><span class=u>&#x261E;</span>The <code>pass</code> statement in Python is like a empty set of curly braces (<code>{}</code>) in Java or C.
ja:<p><span class=u>&#x261E;</span><code>pass</code>文は、JavaやC言語における空っぽの波括弧（<code>{}</code>）のようなものだ。


en:<p>Many classes are inherited from other classes, but this one is not. Many classes define methods, but this one does not. There is nothing that a Python class absolutely must have, other than a name. In particular, C++ programmers may find it odd that Python classes don&#8217;t have explicit constructors and destructors. Although it&#8217;s not required, Python classes <em>can</em> have something similar to a constructor: the <code>__init__()</code> method.
ja:<p>多くのクラスは他のクラスを継承するが、このクラスは何も継承していない。多くのクラスはメソッドを定義するが、このクラスは何も定義していない。名前を除けば、Pythonのクラスが絶対に持っていなければならないものなど無いのだ。特にC++のプログラマは、Pythonのクラスが明示的なコンストラクタやデストラクタを持っていないことを不思議に思うかもしれない。必須ではないが、Pythonのクラスはコンストラクタに似た<code>__init__()</code>メソッドを持つことが<em>できる</em>。


en:<h3 id=init-method>The <code>__init__()</code> Method</h3>
ja:<h3 id=init-method><code>__init__()</code>メソッド</h3>


en:<p>This example shows the initialization of the <code>Fib</code> class using the <code>__init__</code> method.
ja:<p>次のコードでは<code>__init__</code>メソッドを使って<code>Fib</code>クラスを初期化している。


en:<li>Classes can (and should) have <code>docstring</code>s too, just like modules and functions.
ja:<li>モジュールや関数と同様に、クラスも<code>docstring</code>を持つことができる（できるかぎり持たせよう）。


en:<li>The <code>__init__()</code> method is called immediately after an instance of the class is created. It would be tempting&nbsp;&mdash;&nbsp;but technically incorrect&nbsp;&mdash;&nbsp;to call this the &#8220;constructor&#8221; of the class. It&#8217;s tempting, because it looks like a C++ constructor (by convention, the <code>__init__()</code> method is the first method defined for the class), acts like one (it&#8217;s the first piece of code executed in a newly created instance of the class), and even sounds like one. Incorrect, because the object has already been constructed by the time the <code>__init__()</code> method is called, and you already have a valid reference to the new instance of the class.
ja:<li><code>__init__()</code>メソッドは、クラスのインスタンスが生成されるとすぐに呼び出される。このメソッドのことをクラスの「コンストラクタ」と呼びたくなるかもしれないが、それは厳密には誤りだ。確かに、これはC++のコンストラクタと似たものに見えるし（慣例上、<code>__init__()</code> メソッドはクラスの一番初めに定義される）、同じような処理をするし（新しく作成されたインスタンスのなかで一番最初に実行される）、名前自体もそれっぽい。しかし、そう呼ぶのは正しくない。なぜなら、<code>__init__()</code>メソッドが呼び出されたときにはオブジェクトはすでに作成されており、そのクラスの新しいインスタンスへの有効な参照をあなたはすでに持っているからだ。


en:<p>The first argument of every class method, including the <code>__init__()</code> method, is always a reference to the current instance of the class. By convention, this argument is named <var>self</var>. This argument fills the role of the reserved word <code>this</code> in <abbr>C++</abbr> or Java, but <var>self</var> is not a reserved word in Python, merely a naming convention. Nonetheless, please don&#8217;t call it anything but <var>self</var>; this is a very strong convention.
ja:<p><code>__init__()</code>メソッドを含むすべてのメソッドの最初の引数は、現在のインスタンスへの参照だ。慣例により、この引数には<var>self</var>という名前を付ける。この引数は、<abbr>C++</abbr>やJavaにおける予約語<code>this</code>と同じ役割を果たすが、<var>self</var>はPythonの予約語ではなく、単に慣例上そう名付けられているだけでしかない。そうは言っても、これに<var>self</var>以外の名前を付けないでほしい。これは非常に強い慣例なのだ。


en:<p>In the <code>__init__()</code> method, <var>self</var> refers to the newly created object; in other class methods, it refers to the instance whose method was called. Although you need to specify <var>self</var> explicitly when defining the method, you do <em>not</em> specify it when calling the method; Python will add it for you automatically.
ja:<p><code>__init__()</code>メソッドの中では、<var>self</var>は新しく作成されたオブジェクトを指している。それ以外のメソッドでは、<var>self</var>はメソッドが呼び出されたインスタンスを参照している。メソッドを定義するときは<var>self</var>引数を明示的に書く必要があるのだが、メソッドを呼び出すときにはこの引数を<em>与えてはならない</em>。Pythonが自動的に付け加えてくれるのだ。


en:<h2 id=instantiating-classes>Instantiating Classes</h2>
ja:<h2 id=instantiating-classes>クラスをインスタンス化する</h2>


en:<p>Instantiating classes in Python is straightforward. To instantiate a class, simply call the class as if it were a function, passing the arguments that the <code>__init__()</code> method requires. The return value will be the newly created object.
ja:<p>Pythonではクラスを簡単にインスタンス化できる。クラスをインスタンス化するには、<code>__init__()</code>が要求する引数を渡して、クラスを関数のように呼び出すだけで良い。すると、戻り値として新しく生成されたオブジェクトが返される。


en:<li>You are creating an instance of the <code>Fib</code> class (defined in the <code>fibonacci2</code> module) and assigning the newly created instance to the variable <var>fib</var>. You are passing one parameter, <code>100</code>, which will end up as the <var>max</var> argument in <code>Fib</code>&#8217;s <code>__init__()</code> method.
ja:<li><code>Fib</code>クラス（<code>fibonacci2</code> モジュールで定義されている）の新しいインスタンスを作り、それを変数<var>fib</var>に代入している。<code>100</code>という引数を1つ渡しているが、これは結局<code>Fib</code>クラスの<code>__init__()</code>メソッドで<code>max</code>引数として扱われる。


en:<li><var>fib</var> is now an instance of the <code>Fib</code> class.
ja:<li><var>fib</var>は<code>Fib</code>クラスのインスタンスになった。


en:<li>Every class instance has a built-in attribute, <code>__class__</code>, which is the object&#8217;s class. Java programmers may be familiar with the <code>Class</code> class, which contains methods like <code>getName()</code> and <code>getSuperclass()</code> to get metadata information about an object. In Python, this kind of metadata is available through attributes, but the idea is the same.
ja:<li>どんなクラスのインスタンスも組み込み属性の<code>__class__</code>を持っているが、この属性はそのオブジェクトのクラスを指している。Javaのプログラマなら、<code>getName()</code>や<code>getSuperclass()</code>といったオブジェクトのメタデータ情報を得るためのメソッドが入った<code>Class</code>クラスに馴染みがあるかもしれない。Pythonでは属性を通じてこの種のメタデータに参照することになるのだが、その考え方自体は同じだ。


en:<li>You can access the instance&#8217;s <code>docstring</code> just as with a function or a module. All instances of a class share the same <code>docstring</code>.
ja:<li>インスタンスの<code>docstring</code>には、関数やモジュールの場合と同じやり方でアクセスできる。ある1つのクラスのインスタンスはすべて同じ<code>docstring</code>を持つ。


en:<p><span class=u>&#x261E;</span>In Python, simply call a class as if it were a function to create a new instance of the class. There is no explicit <code>new</code> operator like there is in <abbr>C++</abbr> or Java.
ja:<p><span class=u>&#x261E;</span>Pythonでは関数のようにクラスを呼び出すことでクラスの新しいインスタンスを作成できる。<abbr>C++</abbr>やJavaにあるような明示的な<code>new</code>演算子は存在しない。


en:<h2 id=instance-variables>Instance Variables</h2>
ja:<h2 id=instance-variables>インスタンス変数</h2>


en:<p>On to the next line:
ja:<p>次の行へ進もう：


en:<li>What is <var>self.max</var>? It&#8217;s an instance variable. It is completely separate from <var>max</var>, which was passed into the <code>__init__()</code> method as an argument. <var>self.max</var> is &#8220;global&#8221; to the instance. That means that you can access it from other methods.
ja:<li><var>self.max</var>というのは何だろう？ これはインスタンス変数だ。<code>__init__()</code>メソッドに引数として渡された<var>max</var>とはまったく違う。<var>self.max</var> は、このインスタンスにおいて「グローバル」だ。要するに、他のメソッドからこの変数にアクセスできるのだ。


en:<li><var>self.max</var> is defined in the <code>__init__()</code> method&hellip;
ja:<li><var>self.max</var>は、<code>__init__()</code>メソッドで定義されて&hellip;&hellip;


en:<li>&hellip;and referenced in the <code>__next__()</code> method.
ja:<li>&hellip;&hellip;<code>__next__()</code>メソッドで参照される。


en:<p>Instance variables are specific to one instance of a class. For example, if you create two <code>Fib</code> instances with different maximum values, they will each remember their own values.
ja:<p>インスタンス変数は、クラスの個々のインスタンスに固有だ。例えば、2つの <code>Fib</code>インスタンスを異なる最大値を与えて作った場合、この2つはそれぞれの値を保持することになる。


en:<h2 id=a-fibonacci-iterator>A Fibonacci Iterator</h2>
ja:<h2 id=a-fibonacci-iterator>フィボナッチイテレータ</h2>


en:<p><em>Now</em> you&#8217;re ready to learn how to build an iterator. An iterator is just a class that defines an <code>__iter__()</code> method.
ja:<p><em>ようやく</em>イテレータの作り方を学ぶ準備ができた。イテレータとは<code>__iter__()</code>メソッドを実装した単なるクラスだ。


en:<p class=d>[<a href=examples/fibonacci2.py>download <code>fibonacci2.py</code></a>]
ja:<p class=d>[<a href=examples/fibonacci2.py><code>fibonacci2.py</code>をダウンロードする</a>]


en:<li>To build an iterator from scratch, <code>fib</code> needs to be a class, not a function.
ja:<li>イテレータをゼロから作るには、<code>fib</code>を関数ではなくクラスにする必要がある。


en:<li>&#8220;Calling&#8221; <code>Fib(max)</code> is really creating an instance of this class and calling its <code>__init__()</code> method with <var>max</var>. The <code>__init__()</code> method saves the maximum value as an instance variable so other methods can refer to it later.
ja:<li><code>Fib(max)</code>を「呼び出す」と、実際にはこのクラスのインスタンスが生成され、<var>max</var>を引数として<code>__init__()</code>メソッドが呼び出される。<code>__init__()</code>メソッドは、最大値<var>max</var>をインスタンス変数として保存することによって、後で他のメソッドがそれを参照できるようにする。


en:All three of these class methods, <code>__init__</code>, <code>__iter__</code>, and <code>__next__</code>, begin and end with a pair of underscore (<code>_</code>) characters. Why is that? There&#8217;s nothing magical about it, but it usually indicates that these are &#8220;<dfn>special methods</dfn>.&#8221; The only thing &#8220;special&#8221; about special methods is that they aren&#8217;t called directly; Python calls them when you use some other syntax on the class or an instance of the class. <a href=special-method-names.html>More about special methods</a>.
ja:<code>__init__</code>, <code>__iter__</code>, <code>__next__</code>の3つのメソッドのどれにも、先頭と末尾に2つのアンダースコア(<code>_</code>)が付いている。これはどうしてだろう？ これに魔術的な意味は何もないが、通常はこれらが<dfn>特殊メソッド</dfn>であることを示している。特殊メソッドが唯一「特殊」なことといえば、これらが直接呼び出されるのではなく、クラスやそのインスタンスについて何か他の構文を使ったときに、Pythonがこれらを呼び出すということだ。<a href=special-method-names.html>特殊メソッドの詳細についてはこちら</a>。


en:<li>The <code>__iter__()</code> method is called whenever someone calls <code>iter(fib)</code>. (As you&#8217;ll see in a minute, a <code>for</code> loop will call this automatically, but you can also call it yourself manually.) After performing beginning-of-iteration initialization (in this case, resetting <code>self.a</code> and <code>self.b</code>, our two counters), the <code>__iter__()</code> method can return any object that implements a <code>__next__()</code> method. In this case (and in most cases), <code>__iter__()</code> simply returns <var>self</var>, since this class implements its own <code>__next__()</code> method.
ja:<li>この<code>__iter__()</code>メソッドは、誰かが<code>iter(fib)</code>を呼び出した時に呼び出される（もうすぐ分かるように、<code>for</code>ループが自動でこれを呼び出すし、自分の手で呼び出すこともできる）。イテレーションを始めるための初期化（この例では、2つのカウンタ<code>self.a</code>と<code>self.b</code>をリセットをする）を終えたら、<code>__iter__()</code>メソッドは<code>__next__()</code>メソッドを実装した何らかのオブジェクトを返せばよい。この例では（そして多くの場合では）、クラス自身が<code>__next__()</code>メソッドを実装しているので、<code>__iter__()</code>はただ単に<var>self</var>を返している。


en:<li>The <code>__next__()</code> method is called whenever someone calls <code>next()</code> on an iterator of an instance of a class. That will make more sense in a minute.
ja:<li>誰かがイテレータたるクラスのインスタンスについて<code>next()</code>メソッドを呼び出すと、この<code>__next__()</code>メソッドが呼び出される。この意味はこの後すぐに分かる。


en:<li>When the <code>__next__()</code> method raises a <code>StopIteration</code> exception, this signals to the caller that the iteration is exhausted. Unlike most exceptions, this is not an error; it&#8217;s a normal condition that just means that the iterator has no more values to generate. If the caller is a <code>for</code> loop, it will notice this <code>StopIteration</code> exception and gracefully exit the loop. (In other words, it will swallow the exception.) This little bit of magic is actually the key to using iterators in <code>for</code> loops.
ja:<li><code>__next__()</code>メソッドが<code>StopIteration</code>例外を送出すると、この例外は呼び出し側にイテレーションの終了を告げることになる。ほとんどの例外とは違って、この例外はエラーではない。この例外は正常な状況で送出されるもので、単に「イテレータは生成すべき値をこれ以上持っていない」ということを意味するにすぎないのだ。仮に呼び出し側が<code>for</code>ループだとすると、<code>for</code>ループは<code>StopIteration</code>例外に気づいて、何事もなかったかのようにループから脱出する（言い換えれば、例外は飲み込まれるというわけだ）。この小さな魔法こそが、<code>for</code>ループでイテレータを使う鍵だ。


en:<li>To spit out the next value, an iterator&#8217;s <code>__next__()</code> method simply <code>return</code>s the value. Do not use <code>yield</code> here; that&#8217;s a bit of syntactic sugar that only applies when you&#8217;re using generators. Here you&#8217;re creating your own iterator from scratch; use <code>return</code> instead.
ja:<li>イテレータの<code>__next__()</code>メソッドは値を単純に<code>return</code>することで、新しい値を吐き出す。ここで<code>yield</code>を使ってはならない。<code>yield</code>はちょっとした糖衣構文で、ジェネレータにしか使うことができないものだからだ。ここではイテレータをゼロから作っているので、代わりに<code>return</code>を使う。


en:<p>Thoroughly confused yet? Excellent. Let&#8217;s see how to call this iterator:
ja:<p>まだ完全に混乱してはいないよね？ 素晴らしい。このイテレータを呼び出す方法を見ていこう：


en:<p>Why, it&#8217;s exactly the same! Byte for byte identical to how you called <a href=generators.html#a-fibonacci-generator>Fibonacci-as-a-generator</a> (modulo one capital letter). But how?
ja:<p>ほら、完全に同じだ！ <a href=generators.html#a-fibonacci-generator>フィボナッチジェネレータ</a>を呼び出したときと一字一句等しい（1文字だけ大文字になっていることを除けば）。しかしなぜだろう？


en:<p>There&#8217;s a bit of magic involved in <code>for</code> loops. Here&#8217;s what happens:
ja:<p><code>for</code>ループの中にちょっとした魔法が仕込まれている。ここでは次のようなことが起きている：


en:<li>The <code>for</code> loop calls <code>Fib(1000)</code>, as shown. This returns an instance of the <code>Fib</code> class. Call this <var>fib_inst</var>.
ja:<li>見て分かるように、<code>for</code>ループは<code>Fib(1000)</code>を呼び出している。この呼び出しによって<code>Fib</code>クラスのインスタンスが返される。これを<var>fib_inst</var>と呼ぶことにしよう。


en:<li>Secretly, and quite cleverly, the <code>for</code> loop calls <code>iter(fib_inst)</code>, which returns an iterator object. Call this <var>fib_iter</var>. In this case, <var>fib_iter</var> == <var>fib_inst</var>, because the <code>__iter__()</code> method returns <var>self</var>, but the <code>for</code> loop doesn&#8217;t know (or care) about that.
ja:<li>本当に賢いことに、<code>for</code>ループは<code>iter(fib_inst)</code>を水面下で呼び出してくれる。この呼び出しでイテレータオブジェクトが返される。これを<var>fib_iter</var>と呼ぶことにしよう。この例では、<code>__iter__()</code>メソッドは<var>self</var>を返すので、<var>fib_iter</var> == <var>fib_inst</var>となるが、<code>for</code>ループはそのことを知らない（というか気にしない）。


en:<li>To &#8220;loop through&#8221; the iterator, the <code>for</code> loop calls <code>next(fib_iter)</code>, which calls the <code>__next__()</code> method on the <code>fib_iter</code> object, which does the next-Fibonacci-number calculations and returns a value. The <code>for</code> loop takes this value and assigns it to <var>n</var>, then executes the body of the <code>for</code> loop for that value of <var>n</var>.
ja:<li>イテレータの「全体をループする」ために、<code>for</code>ループは<code>next(fib_iter)</code>を呼び出す。これによって<code>fib_iter</code>オブジェクトの<code>__next__()</code>メソッドが呼び出され、このメソッドは次のフィボナッチ数を計算してその値を返す。<code>for</code>ループはこの値を受け取って<var>n</var>へ代入し、この<var>n</var>の値について<code>for</code>ループの本文を実行する。


en:<li>How does the <code>for</code> loop know when to stop? I&#8217;m glad you asked! When <code>next(fib_iter)</code> raises a <code>StopIteration</code> exception, the <code>for</code> loop will swallow the exception and gracefully exit. (Any other exception will pass through and be raised as usual.) And where have you seen a <code>StopIteration</code> exception? In the <code>__next__()</code> method, of course!
ja:<li><code>for</code>ループは停止すべき時をどのように知るのかって？ その質問を待っていた！ <code>next(fib_iter)</code>が<code>StopIteration</code>例外を送出すると、<code>for</code>ループはその例外を飲み込んで、何事もなかったかのようにループを抜ける（その他の例外は飲み込まれること無く、通常通り送出される）。そして、<code>StopIteration</code>を見たのはどこだっただろうか？ もちろん、<code>__next__()</code> メソッドのところだ！


en:<h2 id=a-plural-rule-iterator>A Plural Rule Iterator</h2>
ja:<h2 id=a-plural-rule-iterator>名詞を複数形にする規則のイテレータ</h2>


en:<aside>iter(f) calls f.__iter__<br>next(f) calls f.__next__</aside>
ja:<aside>iter(f)はf.__iter__を呼び出す<br>next(f)はf.__next__を呼び出す</aside>


en:<p>Now it&#8217;s time for the finale. Let&#8217;s rewrite the <a href=generators.html>plural rules generator</a> as an iterator.
ja:<p>いよいよ大詰めだ。<a href=generators.html>名詞を複数形にする規則のジェネレータ</a>をイテレータとして書き換えよう。


en:<p class=d>[<a href=examples/plural6.py>download <code>plural6.py</code></a>]
ja:<p class=d>[<a href=examples/plural6.py><code>plural6.py</code>をダウンロードする</a>]


en:<p>So this is a class that implements <code>__iter__()</code> and <code>__next__()</code>, so it can be used as an iterator. Then, you instantiate the class and assign it to <var>rules</var>. This happens just once, on import.
ja:<p>さて、このクラスは<code>__iter__()</code>と<code>__next__()</code>を実装しているので、イテレータとして使うことができる。このクラスはインスタンス化されて<var>rules</var>に代入される。この処理はインポートするときに一度だけ行われる。


en:<p>Let&#8217;s take the class one bite at a time.
ja:<p>このクラスを少しずつ見ていこう。


en:<li>When we instantiate the <code>LazyRules</code> class, open the pattern file but don&#8217;t read anything from it. (That comes later.)
ja:<li><code>LazyRules</code>クラスをインスタンス化する際に、パターンファイルが開かれるが、その中身は一切読み込まない（読み込みは後で行うのだ）。


en:<li>After opening the patterns file, initialize the cache. You&#8217;ll use this cache later (in the <code>__next__()</code> method) as you read lines from the pattern file.
ja:<li>パターンファイルを開いたら、キャッシュの初期化を行う。このキャッシュは、あとで（<code>__next__()</code>メソッドで）パターンファイルの各行を読み込むときに使う。


en:<p>Before we continue, let&#8217;s take a closer look at <var>rules_filename</var>. It&#8217;s not defined within the <code>__iter__()</code> method. In fact, it&#8217;s not defined within <em>any</em> method. It&#8217;s defined at the class level. It&#8217;s a <i>class variable</i>, and although you can access it just like an instance variable (<var>self.rules_filename</var>), it is shared across all instances of the <code>LazyRules</code> class.
ja:<p>先へ進む前に、<var>rules_filename</var>をよく見てみよう。これは<code>__iter__()</code>メソッドの内部では定義されていない。それどころか、これはどのメソッドの内部でも定義されていない。これはクラスレベルで定義されているのだ。これは<i>クラス変数</i>というもので、これにはインスタンス変数とまったく同じやり方（<var>self.rules_filename</var>）でアクセスできるのだが、この変数は<code>LazyRules</code>クラスのすべてのインスタンスによって共有されている。


en:<li>Each instance of the class inherits the <var>rules_filename</var> attribute with the value defined by the class.
ja:<li>このクラスの各々のインスタンスは、クラスで定義された値を持つ属性<var>rules_filename</var>を受け継いでいる。


en:<li>Changing the attribute&#8217;s value in one instance does not affect other instances&hellip;
ja:<li>1つのインスタンスの属性値を変更しても、他のインスタンスの属性値には影響を与えず&hellip;&hellip;


en:<li>&hellip;nor does it change the class attribute. You can access the class attribute (as opposed to an individual instance&#8217;s attribute) by using the special <code>__class__</code> attribute to access the class itself.
ja:<li>&hellip;&hellip;クラス属性も変更しない。クラス自体にアクセスするための特殊属性<code>__class__</code>を使うことで、（個々のインスタンスの属性ではなく）クラス属性を参照できる。


en:<li>If you change the class attribute, all instances that are still inheriting that value (like <var>r1</var> here) will be affected.
ja:<li>クラス属性を変更すると、まだ値を受け継いでいるインスタンス（ここでは<var>r1</var>）はその影響を受ける。


en:<li>Instances that have overridden that attribute (like <var>r2</var> here) will not be affected.
ja:<li>その属性を上書きしているインスタンス（ここでは<var>r2</var>）は影響を受けない。


en:<p>And now back to our show.
ja:<p>では本題に戻ろう。


en:<li>The <code>__iter__()</code> method will be called every time someone&nbsp;&mdash;&nbsp;say, a <code>for</code> loop&nbsp;&mdash;&nbsp;calls <code>iter(rules)</code>.
ja:<li><code>__iter__()</code>メソッドは、誰かが（例えば<code>for</code>ループが）<code>iter(rules)</code>を呼び出すたびに呼び出される。


en:<li>The one thing that every <code>__iter__()</code> method must do is return an iterator. In this case, it returns <var>self</var>, which signals that this class defines a <code>__next__()</code> method which will take care of returning values throughout the iteration.
ja:<li>すべての<code>__iter__()</code>メソッドが絶対にやらなればならないのは、イテレータを返すことだけだ。この例の<code>__iter__()</code>メソッドは<var>self</var>を返している。これは、イテレーション時に値を返す仕事をする<code>__next__()</code>メソッドをこのクラスが定義していることを示している。


en:<li>The <code>__next__()</code> method gets called whenever someone&nbsp;&mdash;&nbsp;say, a <code>for</code> loop&nbsp;&mdash;&nbsp;calls <code>next(rules)</code>. This method will only make sense if we start at the end and work backwards. So let&#8217;s do that.
ja:<li><code>__next__()</code> メソッドは、誰か（例えば<code>for</code>ループ）が<code>next(rules)</code>を呼び出すたびに呼び出される。このメソッドの意味は、後ろから読んでいかないと分からないので、そうやって見ていこう。


en:<li>The last part of this function should look familiar, at least. The <code>build_match_and_apply_functions()</code> function hasn&#8217;t changed; it&#8217;s the same as it ever was.
ja:<li>この関数の最後の部分は、少なくとも見覚えがあるはずだ。<code>build_match_and_apply_functions()</code>関数は変更されていない。以前のものと同じだ。


en:<li>The only difference is that, before returning the match and apply functions (which are stored in the tuple <var>funcs</var>), we&#8217;re going to save them in <code>self.cache</code>.
ja:<li>唯一の違いは、マッチと処理を行う関数 (タプル <var>funcs</var> に格納されている) を返す前に、それを<code>self.cache</code>に保存していることだけだ。


en:<p>Moving backwards&hellip;
ja:<p>前の方に戻ろう&hellip;&hellip;


en:<li>A bit of advanced file trickery here. The <code>readline()</code> method (note: singular, not the plural <code>readlines()</code>) reads exactly one line from an open file. Specifically, the next line. (<em>File objects are iterators too! It&#8217;s iterators all the way down&hellip;</em>)
ja:<li>ファイルの少し高度なトリックを使っている。<code>readline()</code>メソッド（注: 単数形の<code>readline()</code>で、複数形の<code>readlines()</code>ではない）は、開かれたファイルからちょうど1行だけを読み込む。具体的には次の1行を読みこむのだ（<em>ファイルオブジェクトもイテレータとして振る舞う！ 端から端までイテレータだ&hellip;&hellip;</em>）。


en:<li>If there was a line for <code>readline()</code> to read, <var>line</var> will not be an empty string. Even if the file contained a blank line, <var>line</var> would end up as the one-character string <code>'\n'</code> (a carriage return). If <var>line</var> is really an empty string, that means there are no more lines to read from the file.
ja:<li><code>readline()</code>が読み込む行がまだある場合には、<var>line</var>は空の文字列にはならない。たとえファイルが空行を含んでいたとしても、<var>line</var> は1文字の<code>'\n'</code>（改行文字）という文字列になるだろう。もし<var>line</var>が本当に空の文字列だったとしたら、それはファイルにもう読み込める行が無いということだ。


en:<li>When we reach the end of the file, we should close the file and raise the magic <code>StopIteration</code> exception. Remember, we got to this point because we needed a match and apply function for the next rule. The next rule comes from the next line of the file&hellip; but there is no next line! Therefore, we have no value to return. The iteration is over. (<span class=u>&#x266B;</span> The party&#8217;s over&hellip; <span class=u>&#x266B;</span>)
ja:<li>ファイルの末尾に到達したら、そのファイルを閉じて魔法の<code>StopIteration</code>例外を発生させなければならない。この行までたどり着いた理由は、「新しい規則に基づいてマッチと処理を行う関数」を必要としていたからだということを思いだそう。新しい規則はファイルの次の行から得られるわけだが、その次の行とやらは存在しない！ つまり、返す値がもう無いので、イテレーションは終わりなのだ。<!--(<span class=u>&#x266B;</span>パーティーは終わりだ&hellip;&hellip; <span class=u>&#x266B;</span>)-->


en:<p>Moving backwards all the way to the start of the <code>__next__()</code> method&hellip;
ja:<p><code>__next__()</code>メソッドの一番上まで戻ろう&hellip;&hellip;


en:<li><code>self.cache</code> will be a list of the functions we need to match and apply individual rules. (At least <em>that</em> should sound familiar!) <code>self.cache_index</code> keeps track of which cached item we should return next. If we haven&#8217;t exhausted the cache yet (<i>i.e.</i> if the length of <code>self.cache</code> is greater than <code>self.cache_index</code>), then we have a cache hit! Hooray! We can return the match and apply functions from the cache instead of building them from scratch.
ja:<li><code>self.cache</code>は、それぞれの規則に基づいてマッチと処理を行うために必要な関数のリストになるものだ（少なくとも<em>これには</em>聞き覚えがあるはずだよ！）。<code>self.cache_index</code>は、キャッシュされた要素のうち、次にどれを返さなければならないかを記録している。キャッシュがまだ残っている場合には（<i>つまり</i><code>self.cache</code>の長さが<code>self.cache_index</code>よりも大きい場合は）キャッシュがヒットする！ やった！ マッチと処理を行う関数を初めから作るかわりに、値をキャッシュから取り出して返すことができるのだ。


en:<li>On the other hand, if we don&#8217;t get a hit from the cache, <em>and</em> the file object has been closed (which could happen, further down the method, as you saw in the previous code snippet), then there&#8217;s nothing more we can do. If the file is closed, it means we&#8217;ve exhausted it&nbsp;&mdash;&nbsp;we&#8217;ve already read through every line from the pattern file, and we&#8217;ve already built and cached the match and apply functions for each pattern. The file is exhausted; the cache is exhausted; I&#8217;m exhausted. Wait, what? Hang in there, we&#8217;re almost done.
ja:<li>その一方で、キャッシュにヒットせず、<em>なおかつ</em>ファイルオブジェクトが既に閉じられている場合は（これが起こる場合については、先ほどこのメソッドの下の方のコードを説明した時に見た）、もうこれ以上やるべきことはない。ファイルが閉じてしまっているということは、このファイルを全部使い切ってしまったということ&nbsp;&mdash;&nbsp;つまり、既にパターンファイル全体を読み込んでいて、すべてのパターンに基づくマッチと処理の関数を作成し終わり、そのキャッシュ化も済んでいるということだ。ファイルは読み尽くされ、キャッシュも使い果たされ、私は疲れてしまった。待って、何だって？ もう少し頑張ろう、もうゴールは目前だ。


en:<p>Putting it all together, here&#8217;s what happens when:
ja:<p>すべてをまとめると、次のようなことが起きている：


en:<li>When the module is imported, it creates a single instance of the <code>LazyRules</code> class, called <var>rules</var>, which opens the pattern file but does not read from it.
ja:<li>モジュールがインポートされると、<code>LazyRules</code>クラスのインスタンスが1つだけ生成され、<var>rules</var>という名前が付けられる。これはパターンファイルを開くが、その内容は読み込まない。


en:<li>When asked for the first match and apply function, it checks its cache but finds the cache is empty. So it reads a single line from the pattern file, builds the match and apply functions from those patterns, and caches them.
ja:<li>最初のマッチと処理の関数が要求されると、まずキャッシュが確認されるが、キャッシュが空であることが分かる。すると、パターンファイルから1つの行が読み込まれ、そのパターンを元にマッチと処理の関数が作成され、キャッシュされる。


en:<li>Let&#8217;s say, for the sake of argument, that the very first rule matched. If so, no further match and apply functions are built, and no further lines are read from the pattern file.
ja:<li>仮に、一番最初の規則がマッチしたとしよう。その場合は、マッチと処理の関数はそれ以上作成されず、パターンファイルからそれ以上は読み込まれない。


en:<li>Furthermore, for the sake of argument, suppose that the caller calls the <code>plural()</code> function <em>again</em> to pluralize a different word. The <code>for</code> loop in the <code>plural()</code> function will call <code>iter(rules)</code>, which will reset the cache index but will not reset the open file object.
ja:<li>さらに、今度は別の単語を複数形にするために、呼び出し元が<em>再び</em><code>plural()</code>関数を呼び出したと仮定しよう。<code>plural()</code>関数の<code>for</code>ループは<code>iter(rules)</code>を呼び出し、ここでキャッシュのインデックスは初期化されるが、ファイルオブジェクトはリセットされない。


en:<li>The first time through, the <code>for</code> loop will ask for a value from <var>rules</var>, which will invoke its <code>__next__()</code> method. This time, however, the cache is primed with a single pair of match and apply functions, corresponding to the patterns in the first line of the pattern file. Since they were built and cached in the course of pluralizing the previous word, they&#8217;re retrieved from the cache. The cache index increments, and the open file is never touched.
ja:<li>最初のループで、<code>for</code>ループは値を<var>rules</var>から取得しようとする。その結果、<code>__next__()</code>メソッドが呼び出されることになるが、今回はパターンファイルの1行目に対応するマッチと処理の関数のペアがキャッシュに1つ準備されている。この2つの関数は前の単語を複数形にする時に作成・キャッシュされたものなので、ここでキャッシュから取り出される。そして、キャッシュのインデックスはインクリメントされ、開いたファイルについては触れることもない。


en:<li>Let&#8217;s say, for the sake of argument, that the first rule does <em>not</em> match this time around. So the <code>for</code> loop comes around again and asks for another value from <var>rules</var>. This invokes the <code>__next__()</code> method a second time. This time, the cache is exhausted&nbsp;&mdash;&nbsp;it only contained one item, and we&#8217;re asking for a second&nbsp;&mdash;&nbsp;so the <code>__next__()</code> method continues. It reads another line from the open file, builds match and apply functions out of the patterns, and caches them.
ja:<li>仮に、今回は最初の規則にマッチ<em>しなかった</em>ものとしよう。すると、<code>for</code>文は再びループして、<var>rules</var>から別の値が取り出そうとする。ここで<code>__next__()</code>メソッドが2度目の呼び出しを受けることになるが、この時点でキャッシュは使い切られている&nbsp;&mdash;&nbsp;2つ目のルールが欲しいのに、キャッシュには要素が1つしかない&nbsp;&mdash;&nbsp;ので<code>__next__()</code>メソッドは処理を続け、開いたファイルから別の行を読み込み、パターンを元にマッチと処理の関数を構築し、この2つの関数をキャッシュする。


en:<li>This read-build-and-cache process will continue as long as the rules being read from the pattern file don&#8217;t match the word we&#8217;re trying to pluralize. If we do find a matching rule before the end of the file, we simply use it and stop, with the file still open. The file pointer will stay wherever we stopped reading, waiting for the next <code>readline()</code> command. In the meantime, the cache now has more items in it, and if we start all over again trying to pluralize a new word, each of those items in the cache will be tried before reading the next line from the pattern file.
ja:<li>この読み込み-構築-キャッシュのプロセスは、複数形にしたい単語にパターンファイルから読み込まれた規則がマッチするまで続く。もし、ファイルの末尾に達する前にマッチする規則を見つけた場合は、その規則を使って変換を施し処理を停止する。この時、ファイルは開かれたままなので、ファイルポインタは読み込みをやめたところに留まり、次の<code>readline()</code>の呼び出しを待つ。他方で、この処理の間にキャッシュには要素が溜まっていく。次に新しい単語を複数形にしようとした時には、パターンファイルの次の行を読み込む前にキャッシュの中にあるものが試されるのだ。


en:<p>We have achieved pluralization nirvana.
ja:<p>名詞を複数形にするパラダイスに到達した。


en:<li><strong>Minimal startup cost.</strong> The only thing that happens on <code>import</code> is instantiating a single class and opening a file (but not reading from it).
ja:<li><strong>最小の起動コスト。</strong><code>import</code>時に行われることは、1つのクラスをインスタンス化するのと、ファイルを開く（しかし内容は読み込まない）ことだけだ。


en:<li><strong>Maximum performance.</strong> The previous example would read through the file and build functions dynamically every time you wanted to pluralize a word. This version will cache functions as soon as they&#8217;re built, and in the worst case, it will only read through the pattern file once, no matter how many words you pluralize.
ja:<li><strong>最大限のパフォーマンス。</strong> 前のバージョンでは単語を複数形にするたびに、ファイルを読み込んで関数を動的に作成していた。このバージョンでは、関数は作成されるとすぐにキャッシュされる。だから、いくつの単語を複数形にするのであれ、最悪の場合でもパターンファイルは1度だけしか読み込まれない。


en:<li><strong>Separation of code and data.</strong> All the patterns are stored in a separate file. Code is code, and data is data, and never the twain shall meet.
ja:<li><strong>コードとデータの分離。</strong> すべてのパターンは別のファイルに格納されている。コードはコード、データはデータ、二つは決して交わらない。


en:<p><span class=u>&#x261E;</span>Is this really nirvana? Well, yes and no. Here&#8217;s something to consider with the <code>LazyRules</code> example: the pattern file is opened (during <code>__init__()</code>), and it remains open until the final rule is reached. Python will eventually close the file when it exits, or after the last instantiation of the <code>LazyRules</code> class is destroyed, but still, that could be a <em>long</em> time. If this class is part of a long-running Python process, the Python interpreter may never exit, and the <code>LazyRules</code> object may never get destroyed.
ja:<p><span class=u>&#x261E;</span>これは本当にパラダイスなのだろうか？ イエスでもありノーでもある。<code>LazyRules</code>のコードについて考慮に入れるべきこととしては、パターンファイルが（<code>__init__()</code>において）開かれたきり、最後の規則にたどり着くまで開かれっぱなしだということがある。最終的には、Pythonが終了する時か、最後の<code>LazyRules</code>クラスのインスタンスが破棄される時にファイルは閉じられるのだが、そうだとしても、その時までには<em>長い</em>時間がかかりうる。もしこのクラスが長時間実行されるPythonプロセスの一部である場合、Pythonインタプリタは決して終了しないかもしれないし、<code>LazyRules</code>オブジェクトも破棄されることはないかもしれない。


en:<p>There are ways around this. Instead of opening the file during <code>__init__()</code> and leaving it open while you read rules one line at a time, you could open the file, read all the rules, and immediately close the file. Or you could open the file, read one rule, save the file position with the <a href=files.html#read><code>tell()</code> method</a>, close the file, and later re-open it and use the <a href=files.html#read><code>seek()</code> method</a> to continue reading where you left off. Or you could not worry about it and just leave the file open, like this example code does. Programming is design, and design is all about trade-offs and constraints. Leaving a file open too long might be a problem; making your code more complicated might be a problem. Which one is the bigger problem depends on your development team, your application, and your runtime environment.
ja:<p>これに対処する方法はいくつかある。<code>__init__()</code>でファイルを開き、1行ずつ読み込んでいくあいだファイルを開きっぱなしにするのではなく、ファイルを開いて、すべてのルールを読み込み、即座にファイルを閉じることができる。もしくは、ファイルを開いて、ルールを1つ読み込み、ファイルの位置を<a href=files.html#read><code>tell()</code>メソッド</a>を使って保持し、ファイルを閉じ、あとでファイルを再び開いて<a href=files.html#read><code>seek()</code>メソッド</a>で、先ほど読み込みを停止した位置から再開することもできる。もしくは、このことを気にせずに、この例がやっているように、ファイルを開いたままにしておくこともできる。プログラミングとはデザインであり、デザインはトレードオフと制約がすべてだ。ファイルを長時間開いたままにしておくことは問題になるかもしれないし、コードを複雑にするのも問題になるかもしれない。どちらがより大きい問題であるかは、その開発チームやアプリケーション、あるいは実行環境によって異なる。


en:<h2 id=furtherreading>Further Reading</h2>
ja:<h2 id=furtherreading>もっと知りたい人のために</h2>


en:<li><a href=http://docs.python.org/3.1/library/stdtypes.html#iterator-types>Iterator types</a>
ja:<li><a href=http://docs.python.org/3.1/library/stdtypes.html#iterator-types>Iterator types</a>


en:<li><a href=http://www.python.org/dev/peps/pep-0234/>PEP 234: Iterators</a>
ja:<li><a href=http://www.python.org/dev/peps/pep-0234/>PEP 234: Iterators</a>


en:<li><a href=http://www.python.org/dev/peps/pep-0255/>PEP 255: Simple Generators</a>
ja:<li><a href=http://www.python.org/dev/peps/pep-0255/>PEP 255: Simple Generators</a>


en:<li><a href=http://www.dabeaz.com/generators/>Generator Tricks for Systems Programmers</a>
ja:<li><a href=http://www.dabeaz.com/generators/>Generator Tricks for Systems Programmers</a>


en:<p class=v><a href=generators.html rel=prev title='back to &#8220;Closures &amp; Generators&#8221;'><span class=u>&#x261C;</span></a> <a href=advanced-iterators.html rel=next title='onward to &#8220;Advanced Iterators&#8221;'><span class=u>&#x261E;</span></a>
ja:<p class=v><a href=generators.html rel=prev title='「クロージャとジェネレーター」に戻る'><span class=u>&#x261C;</span></a> <a href=advanced-iterators.html rel=next title='「高度なイテレータ」へ進む'><span class=u>&#x261E;</span></a>


en:<p class=c>&copy; 2001&ndash;10 <a href=about.html>Mark Pilgrim</a>
ja:<p class=c>&copy; 2001&ndash;10 <a href=about.html>Mark Pilgrim</a>


