en:<p>You are here: <a href=index.html>Home</a> <span class=u>&#8227;</span> <a href=table-of-contents.html#refactoring>Dive Into Python 3</a> <span class=u>&#8227;</span>
ja:<p>現在地: <a href=index.html>ホーム</a> <span class=u>&#8227;</span> <a href=table-of-contents.html#refactoring>Dive Into Python 3</a> <span class=u>&#8227;</span>

en:<title>Refactoring - Dive Into Python 3</title>
ja:<title>リファクタリング - Dive Into Python 3 日本語版</title>


en:<p id=level>Difficulty level: <span class=u title=advanced>&#x2666;&#x2666;&#x2666;&#x2666;&#x2662;</span>
ja:<p id=level>難易度: <span class=u title=上級>&#x2666;&#x2666;&#x2666;&#x2666;&#x2662;</span>


en:<h1>Refactoring</h1>
ja:<h1>リファクタリング</h1>


en:<p><span class=u>&#x275D;</span> After one has played a vast quantity of notes and more notes, it is simplicity that emerges as the crowning reward of art. <span class=u>&#x275E;</span><br>&mdash; <a href=http://en.wikiquote.org/wiki/Fr%C3%A9d%C3%A9ric_Chopin>Fr&eacute;d&eacute;ric Chopin</a>
ja:<p><span class=u>&#x275D;</span> 鍵盤を何度も弾き鳴らし、幾度と無く弾きあかした果てに、簡明さが芸術における無上の報償として姿を現す。<span class=u>&#x275E;</span><br>&mdash; <a href=http://en.wikiquote.org/wiki/Fr%C3%A9d%C3%A9ric_Chopin>フレデリック・ショパン</a>


en:<p id=toc>&nbsp;
ja:<p id=toc>&nbsp;


en:<h2 id=divingin>Diving In</h2>
ja:<h2 id=divingin>飛び込む</h2>


en:<p class=f>Like it or not, bugs happen. Despite your best efforts to write comprehensive <a href=unit-testing.html>unit tests</a>, bugs happen. What do I mean by &#8220;bug&#8221;? A bug is a test case you haven&#8217;t written yet.
ja:<p class=f>好むと好まざるとにかかわらず、バグは発生する。どれだけ手を尽くして包括的な<a href=unit-testing.html>ユニットテスト</a>を書いても、バグは出てくるものだ。「バグ」とは一体何だろうか？ バグとはまだ書かれていないテストケースのことだ。


en:<li>This is a bug. An empty string should raise an <code>InvalidRomanNumeralError</code> exception, just like any other sequence of characters that don&#8217;t represent a valid Roman numeral.
ja:<li>これはバグだ。空白文字列に対しては、有効なローマ数字となっていない他の文字列の場合と同じように、<code>InvalidRomanNumeralError</code>例外が送出されなくてはならない。


en:<p>After reproducing the bug, and before fixing it, you should write a test case that fails, thus illustrating the bug.
ja:<p>バグを再現できたら、それを修正するのに先立って、パスしないようなテストケースを書かなければならない。こうしてバグをはっきりと示すのだ。


en:<li>Pretty simple stuff here. Call <code>from_roman()</code> with an empty string and make sure it raises an <code>InvalidRomanNumeralError</code> exception. The hard part was finding the bug; now that you know about it, testing for it is the easy part.
ja:<li>これは非常にシンプルなコードだ。すなわち、<code>from_roman()</code>を空白文字列とともに呼び出し、<code>InvalidRomanNumeralError</code>例外が送出されるかどうかを確認する。難しいのはバグを見つけ出す段階であって、一度分かってしまえば、そのバグをテストするのはごく簡単なことなのだ。


en:<p>Since your code has a bug, and you now have a test case that tests this bug, the test case will fail:
ja:<p>コードにバグがあって、さらにそのバグに対応するテストケースもあるのだから、このテストケースは失敗するはずだ：


en:<p><em>Now</em> you can fix the bug.
ja:<p><em>これでようやく</em>このバグを修正できる。


en:<li>Only two lines of code are required: an explicit check for an empty string, and a <code>raise</code> statement.
ja:<li>たった二行のコードを追加するだけで足りる。一行目で明示的に空白文字列をチェックし、二行目には<code>raise</code>文をあてるのだ。


en:<li>I don&#8217;t think I&#8217;ve mentioned this yet anywhere in this book, so let this serve as your final lesson in <a href=strings.html#formatting-strings>string formatting</a>. Starting in Python 3.1, you can skip the numbers when using positional indexes in a format specifier. That is, instead of using the format specifier <code>{0}</code> to refer to the first parameter to the <code>format()</code> method, you can simply use <code>{}</code> and Python will fill in the proper positional index for you. This works for any number of arguments; the first <code>{}</code> is <code>{0}</code>, the second <code>{}</code> is <code>{1}</code>, and so forth.
ja:<li>この本の中でまだ触れてないことだと思うので、これを<a href=strings.html#formatting-strings>文字列のフォーマット</a>の最後のレッスンとしよう。Python 3.1からは、フォーマット指定子の中でインデクスを使用する場合に数字を省略できるようになっている。つまり、<code>format()</code>メソッドの最初の引数を参照する場合に、フォーマット指定子の<code>{0}</code>を使わなくとも、単純に<code>{}</code>とすればPythonが自動で適当なインデクスを埋めてくれるのだ。これは引数がいくつあっても機能するもので、最初の<code>{}</code>は<code>{0}</code>に、次の<code>{}</code>は<code>{1}</code>というように解釈されていく。


en:<li>The blank string test case now passes, so the bug is fixed.
ja:<li>空白文字列のテストケースをパスしていることから、このバグが修正されたと分かる。


en:<li>All the other test cases still pass, which means that this bug fix didn&#8217;t break anything else. Stop coding.
ja:<li>他のテストケースもすべてパスしているので、このバグ修正のせいでどこかが壊れたりはしていないということが分かる。コーディングの手を止めよう。


en:<p>Coding this way does not make fixing bugs any easier. Simple bugs (like this one) require simple test cases; complex bugs will require complex test cases. In a testing-centric environment, it may <em>seem</em> like it takes longer to fix a bug, since you need to articulate in code exactly what the bug is (to write the test case), then fix the bug itself. Then if the test case doesn&#8217;t pass right away, you need to figure out whether the fix was wrong, or whether the test case itself has a bug in it. However, in the long run, this back-and-forth between test code and code tested pays for itself, because it makes it more likely that bugs are fixed correctly the first time. Also, since you can easily re-run <em>all</em> the test cases along with your new one, you are much less likely to break old code when fixing new code. Today&#8217;s unit test is tomorrow&#8217;s regression test.
ja:<p>このようにコーディングしても、別にバグが修正しやすくなるわけではない。（このバグのように）簡単なバグには簡単なテストケースで足りるが、複雑なバグには複雑なテストケースが必要となるだろう。もしかしたら、テスト中心の開発環境だとバグを修正するのに長い時間がかかるように<em>見える</em>かもしれない。まずもって、（テストケースを書いて）何がバグなのかをコードの中で明確に示してからバグを修正しなくてはならないし、しかもそこでテストケースをパスしなかったら、修正が間違っていたのか、それともテストケース自体にバグがあるのかを調べなくてはならないからだ。しかし、長い目で見れば、テストコードとそのテストを受けるコードの間を行ったり来たりすることは十分割に合うことだろう。こうすれば、バグが最初の一回で正しく修正されやすくなるし、新しいテストケースと一緒に他の<em>すべての</em>テストケースを再実行することも簡単にできるので、新しいコードを加える際に古いコードを壊してしまうということが非常に少なくなるからだ。今日のユニットテストは、明日の回帰テストとなるのだ。


en:<p class=a>&#x2042;
ja:<p class=a>&#x2042;


en:<h2 id=changing-requirements>Handling Changing Requirements</h2>
ja:<h2 id=changing-requirements>要件の変更に対処する</h2>


en:<p>Despite your best efforts to pin your customers to the ground and extract exact requirements from them on pain of horrible nasty things involving scissors and hot wax, requirements will change. Most customers don&#8217;t know what they want until they see it, and even if they do, they aren&#8217;t that good at articulating what they want precisely enough to be useful. And even if they do, they&#8217;ll want more in the next release anyway. So be prepared to update your test cases as requirements change.
ja:<p>どれだけ顧客を地面に釘付けにして、ハサミやら熱いロウやらを使ったおぞましい罰を与えるぞと脅かし、厳密な要件を引き出しても、要件というのは変わってしまうものだ。そもそも、ほとんどの顧客は実際に見てみるまで、自分が何を求めているのかを理解しないものだ。たとえ理解していたとしても、顧客はどういうものがあれば十分なのかをはっきりと伝えるのが上手ではない。仮に明確に伝えてきたとしても、どのみち次のリリースの時には別の機能も欲しがるようになっている。だから、要件の変更に合わせてテストケースをアップデートできるようにしておこう。


en:<p>Suppose, for instance, that you wanted to expand the range of the Roman numeral conversion functions. Normally, no character in a Roman numeral can be repeated more than three times in a row. But the Romans were willing to make an exception to that rule by having 4 <code>M</code> characters in a row to represent <code>4000</code>. If you make this change, you&#8217;ll be able to expand the range of convertible numbers from <code>1..3999</code> to <code>1..4999</code>. But first, you need to make some changes to your test cases.
ja:<p>例えば、このローマ数字の変換関数が扱える値の範囲を拡張したいと思ったとしよう。普通なら、ローマ数字のどの文字も連続して四回以上繰り返すことはできないのだが、実のところローマ人は時に「<code>4000</code>を表すために、<code>M</code>の文字を四個続けることができる」という例外を設けていた。この変更を施せば、変換できる数の範囲を<code>1..3999</code>から<code>1..4999</code>に拡張できることになる。しかし、まず最初にテストケースに修正を加える必要がある。


en:<p class=d>[<a href=examples/roman8.py>download <code>roman8.py</code></a>]
ja:<p class=d>[<a href=examples/roman8.py><code>roman8.py</code>をダウンロードする</a>]


en:<li>The existing known values don&#8217;t change (they&#8217;re all still reasonable values to test), but you need to add a few more in the <code>4000</code> range. Here I&#8217;ve included <code>4000</code> (the shortest), <code>4500</code> (the second shortest), <code>4888</code> (the longest), and <code>4999</code> (the largest).
ja:<li>すでにタプルに入っている既知の値については何も変更を加えないが（これらはまだテストする意味のある値だ）、<code>4000</code>台の数をいくつか加える必要がある。ここでは<code>4000</code>（最も短い数）、<code>4500</code>（二番目に短い数）、<code>4888</code>（最も長い数）、<code>4999</code>（最大の数）を加えてある。


en:<li>The definition of &#8220;large input&#8221; has changed. This test used to call <code>to_roman()</code> with <code>4000</code> and expect an error; now that <code>4000-4999</code> are good values, you need to bump this up to <code>5000</code>.
ja:<li>「大きな入力値」の定義が変わっている。このテストは<code>to_roman()</code>を<code>4000</code>と共に呼び出してエラーが出るかを確認するものだったが、<code>4000-4999</code>は有効な入力値となったので、引数の値を<code>5000</code>まで引き上げなくてはならない。


en:<li>The definition of &#8220;too many repeated numerals&#8221; has also changed. This test used to call <code>from_roman()</code> with <code>'MMMM'</code> and expect an error; now that <code>MMMM</code> is considered a valid Roman numeral, you need to bump this up to <code>'MMMMM'</code>.
ja:<li>「繰り返され過ぎている数字」の定義も変わっている。このテストは<code>from_roman()</code>を<code>'MMMM'</code>とともに呼び出してエラーが出るかを確認するものだったが、<code>MMMM</code>は有効なローマ数字となったので、引数の値を<code>'MMMMM'</code>まで引き上げなくてはならない。


en:<li>The sanity check loops through every number in the range, from <code>1</code> to <code>3999</code>. Since the range has now expanded, this <code>for</code> loop need to be updated as well to go up to <code>4999</code>.
ja:<li>この動作確認テストでは<code>1</code>から<code>3999</code>までのすべての数をループしていたが、値の範囲が拡張されたのに合わせて、この<code>for</code>ループも<code>4999</code>までの数をテストするように修正しなければならない。


en:<p>Now your test cases are up to date with the new requirements, but your code is not, so you expect several of the test cases to fail.
ja:<p>これでテストケースは新しい要件に追いついたが、コードの方はまだ修正していないので、テストケースのいくつかは失敗するはずだ。


en:<li>The <code>from_roman()</code> known values test will fail as soon as it hits <code>'MMMM'</code>, because <code>from_roman()</code> still thinks this is an invalid Roman numeral.
ja:<li><code>from_roman()</code>の既知の値のテストは<code>'MMMM'</code>に突き当たったところで失敗する。<code>from_roman()</code>がまだこのローマ数字を無効なものとしているからだ。


en:<li>The <code>to_roman()</code> known values test will fail as soon as it hits <code>4000</code>, because <code>to_roman()</code> still thinks this is out of range.
ja:<li><code>to_roman()</code>の既知の値のテストは<code>4000</code>に突き当たったところで失敗する。<code>to_roman()</code>がまだこれを範囲外の数としているからだ。


en:<li>The roundtrip check will also fail as soon as it hits <code>4000</code>, because <code>to_roman()</code> still thinks this is out of range.
ja:<li>往復テストも<code>4000</code>に突き当たったところで失敗する。<code>to_roman()</code>がまだこれを範囲外の数としているからだ。


en:<p>Now that you have test cases that fail due to the new requirements, you can think about fixing the code to bring it in line with the test cases. (When you first start coding unit tests, it might feel strange that the code being tested is never &#8220;ahead&#8221; of the test cases. While it&#8217;s behind, you still have some work to do, and as soon as it catches up to the test cases, you stop coding. After you get used to it, you&#8217;ll wonder how you ever programmed without tests.)
ja:<p>これで新しい要件によって失敗するテストケースができ上がったので、これらのテストをパスするようにコードを修正する作業に移ることができる（ユニットテストをコーディングし始めた最初のうちは、テスト対象のコードが決してユニットテストの「先」にこないことに違和感を覚えるかもしれない。コードが追いついていないのに、まだやるべき作業があって、そしてコードがテストケースに追いついたら、即座にコーディングをやめる。一旦これに慣れたら、これまでどうやってテスト無しでプログラムしてたのかと不思議に思うようになっていることだろう）。


en:<p class=d>[<a href=examples/roman9.py>download <code>roman9.py</code></a>]
ja:<p class=d>[<a href=examples/roman9.py><code>roman9.py</code>をダウンロードする</a>]


en:<li>You don&#8217;t need to make any changes to the <code>from_roman()</code> function at all. The only change is to <var>roman_numeral_pattern</var>. If you look closely, you&#8217;ll notice that I changed the maximum number of optional <code>M</code> characters from <code>3</code> to <code>4</code> in the first section of the regular expression. This will allow the Roman numeral equivalents of <code>4999</code> instead of <code>3999</code>. The actual <code>from_roman()</code> function is completely generic; it just looks for repeated Roman numeral characters and adds them up, without caring how many times they repeat. The only reason it didn&#8217;t handle <code>'MMMM'</code> before is that you explicitly stopped it with the regular expression pattern matching.
ja:<li><code>from_roman()</code>関数には何の修正も加える必要はなく、<var>roman_numeral_pattern</var>を変更をするだけで良い。よく注意してコードを見れば、正規表現の一番初めのところで、任意につけられる<code>M</code>の文字の最大数が<code>3</code>個から<code>4</code>個に変えられていることに気がつくだろう。この修正によって、<code>3999</code>ではなく<code>4999</code>に対応するローマ数字も扱えるようになる。それというのも、<code>from_roman()</code>自体は完全に一般的な関数で、ローマ数字がどれだけ繰り返されているかといったことには構わず、ただ繰り返し使われているローマ数字を洗い出して足し合わせていくだけのものだったからだ。これ以前に<code>'MMMM'</code>を扱えなかったのは、単にこの正規表現パターンでマッチさせて明示的に除外していたというだけのことでしかない。


en:<li>The <code>to_roman()</code> function only needs one small change, in the range check. Where you used to check <code>0 &lt; n &lt; 4000</code>, you now check <code>0 &lt; n &lt; 5000</code>. And you change the error message that you <code>raise</code> to reflect the new acceptable range (<code>1..4999</code> instead of <code>1..3999</code>). You don&#8217;t need to make any changes to the rest of the function; it handles the new cases already. (It merrily adds <code>'M'</code> for each thousand that it finds; given <code>4000</code>, it will spit out <code>'MMMM'</code>. The only reason it didn&#8217;t do this before is that you explicitly stopped it with the range check.)
ja:<li><code>to_roman()</code>には入力値の範囲をチェックする部分に小さな修正を一つ加えるだけで良い。<code>0 &lt; n &lt; 4000</code>とチェックしていた部分を、<code>0 &lt; n &lt; 5000</code>とチェックするように書き直したのだ。そして、有効な入力値の範囲を変更したのにあわせて、<code>raise</code>を使って送出するエラーメッセージも変更しておいた（<code>1..3999</code>から<code>1..4999</code>に）。関数の後の部分は何も変更する必要はなく、もう既に新しいケースを扱えるようになっている（この関数は何の問題もなく、千ごとに<code>'M'</code>を付け加えてくれる。例えば、<code>4000</code>を渡せば、この関数は<code>'MMMM'</code>を返してくれるだろう。これ以前にそうならなかったのは、入力値の範囲をチェックする段階で明示的に除外していたからだ）。


en:<p>You may be skeptical that these two small changes are all that you need. Hey, don&#8217;t take my word for it; see for yourself.
ja:<p>たったこの二つ修正だけでちゃんと動くようになるとは信じられないかもしれないが、ほら、私の言葉なんて信じなくても良いから、自分で確かめてみてほしい。


en:<li>All the test cases pass. Stop coding.
ja:<li>テストケースをすべてパスした。コーディングを止めよう。


en:<p>Comprehensive unit testing means never having to rely on a programmer who says &#8220;Trust me.&#8221;
ja:<p>包括的なユニットテストがあれば、「僕を信じてくれよ」なんていうプログラマに依りかからなくてすむのだ。


en:<p class=a>&#x2042;
ja:<p class=a>&#x2042;


en:<h2 id=refactoring>Refactoring</h2>
ja:<h2 id=refactoring>リファクタリング</h2>


en:<p>The best thing about comprehensive unit testing is not the feeling you get when all your test cases finally pass, or even the feeling you get when someone else blames you for breaking their code and you can actually <em>prove</em> that you didn&#8217;t. The best thing about unit testing is that it gives you the freedom to refactor mercilessly.
ja:<p>包括的なユニットテストの最大の利点は、ようやくすべてのテストケースをパスできたときに味わえる感情にあるのではないし、あなたのせいでコードが壊れたと言い立ててきた人に対して、そうではないと実際に<em>証明</em>できたときに得られる感覚にあるわけでもない。ユニットテストの最も良い点は、容赦なくリファクタリングを施す自由を与えてくれることにあるのだ。


en:<p>Refactoring is the process of taking working code and making it work better. Usually, &#8220;better&#8221; means &#8220;faster&#8221;, although it can also mean &#8220;using less memory&#8221;, or &#8220;using less disk space&#8221;, or simply &#8220;more elegantly&#8221;. Whatever it means to you, to your project, in your environment, refactoring is important to the long-term health of any program.
ja:<p>リファクタリングとは、動作するコードを取り上げて、より良く動くようにしていくプロセスのことだ。普通、「より良い」とは「もっと速い」ということを意味するのだが、状況によっては「メモリの使用が少ない」とか「使用ディスクスペースが小さい」とかいうことを指す場合もあるし、あるいは単純に「よりエレガントだ」ということでもありうる。この言葉があなたにとって、あるいはそのプロジェクトや環境においてどんな意味を持つのであれ、リファクタリングはおよそプログラムの長期的な健全性を保つのに重要なものだと言える。


en:<p>Here, &#8220;better&#8221; means both &#8220;faster&#8221; and &#8220;easier to maintain.&#8221; Specifically, the <code>from_roman()</code> function is slower and more complex than I&#8217;d like, because of that big nasty regular expression that you use to validate Roman numerals. Now, you might think, &#8220;Sure, the regular expression is big and hairy, but how else am I supposed to validate that an arbitrary string is a valid a Roman numeral?&#8221;
ja:<p>ここでは「より良い」を「より速い」と「より保守しやすい」の二つの意味で使う。要するに、<code>from_roman()</code>関数は私が期待するよりも遅くて複雑になってしまっているということなのだが、その原因は巨大で扱いにくい正規表現を使ってローマ数字の有効性を検証していることにある。ここまで読むと、あなたはこのように考えるかもしれない: 「確かにこの正規表現は大きくて不調法だけど、それ以外に任意の文字列が有効なローマ数字かどうかを検証する方法があるだろうか？」


en:<p>Answer: there&#8217;s only 5000 of them; why don&#8217;t you just build a lookup table?  This idea gets even better when you realize that <em>you don&#8217;t need to use regular expressions at all</em>. As you build the lookup table for converting integers to Roman numerals, you can build the reverse lookup table to convert Roman numerals to integers. By the time you need to check whether an arbitrary string is a valid Roman numeral, you will have collected all the valid Roman numerals. &#8220;Validating&#8221; is reduced to a single dictionary lookup.
ja:<p>答え: たった5000個しかないんだから、参照テーブルを作ってみたらどうだろう？ しかも、こうすれば<em>正規表現をまったく使う必要がない</em>ということに気がつけば、このアイデアはさらに魅力なものになるだろう。つまり、整数をローマ数字に変換する参照テーブルを組み立てるときに、ローマ数字を整数に変換する逆の参照テーブルも作ることができるので、任意の文字列が有効なローマ数字かどうかを判別する時には、有効なローマ数字の一覧表が出来上がっていることになるのだ。ここにおいて「有効性の検証」は一つの辞書を参照するという作業に帰着することになる。


en:<p>And best of all, you already have a complete set of unit tests. You can change over half the code in the module, but the unit tests will stay the same. That means you can prove&nbsp;&mdash;&nbsp;to yourself and to others&nbsp;&mdash;&nbsp;that the new code works just as well as the original.
ja:<p>そして何といっても、完全なユニットテストのセットが既に全部そろっている。仮にモジュールのコードを半分以上変更したとしても、ユニットテストは前のまま変わらないでいてくれる。だから、新しいコードが元のコードと同じように機能すると&mdash;自分に対しても他人に対しても&mdash;証明できるのだ。


en:<p class=d>[<a href=examples/roman10.py>download <code>roman10.py</code></a>]
ja:<p class=d>[<a href=examples/roman10.py><code>roman10.py</code>をダウンロードする</a>]


en:<p>Let&#8217;s break that down into digestable pieces. Arguably, the most important line is the last one:
ja:<p>飲み込めるようになるまで、コードを小さく分割してみよう。明らかに、ここで最も重要なのは最後の行だ。


en:<p>You will note that is a function call, but there&#8217;s no <code>if</code> statement around it. This is not an <code>if __name__ == '__main__'</code> block; it gets called <em>when the module is imported</em>. (It is important to understand that modules are only imported once, then cached. If you import an already-imported module, it does nothing. So this code will only get called the first time you import this module.)
ja:<p>ここで関数が呼び出されているが、そのまわりに<code>if</code>文がまったく無いことに気がつくだろう。これは<code>if __name__ == '__main__'</code>ブロックではないのだ。従って、この関数は<em>モジュールがインポートされた時に</em>呼び出されることになる（モジュールは一度しかインポートされず、あとはキャッシュされるということをちゃんと理解しておこう。既にインポートされているモジュールを再びインポートしても、何も実行されないのだ。このコードも最初にモジュールをインポートした時にのみ呼び出されることになる）。


en:<p>So what does the <code>build_lookup_tables()</code> function do? I&#8217;m glad you asked.
ja:<p>それで<code>build_lookup_tables()</code>関数は一体どんな処理を行うものなのかって？ よくぞ聞いてくれた。


en:<li>This is a clever bit of programming&hellip; perhaps too clever. The <code>to_roman()</code> function is defined above; it looks up values in the lookup table and returns them. But the <code>build_lookup_tables()</code> function redefines the <code>to_roman()</code> function to actually do work (like the previous examples did, before you added a lookup table). Within the <code>build_lookup_tables()</code> function, calling <code>to_roman()</code> will call this redefined version. Once the <code>build_lookup_tables()</code> function exits, the redefined version disappears&nbsp;&mdash;&nbsp;it is only defined in the local scope of the <code>build_lookup_tables()</code> function.
ja:<li>これはかなり巧妙なプログラムの組み方だ&hellip;&hellip;もしかしたら巧妙すぎるぐらいかもしれない。<code>to_roman()</code>関数は上の方でも定義されているが、これは参照テーブルで値を探しだし、その値を返すというものでしかない。一方、<code>build_lookup_tables()</code>関数は<code>to_roman()</code>関数を再定義していて、この関数に（参照テーブルを加える前のコードがしていたような）実際の処理を行わせている。この<code>build_lookup_tables()</code>中で<code>to_roman()</code>を呼び出すと、再定義された方の<code>to_roman()</code>関数が呼び出されることになる。そして、<code>build_lookup_tables()</code>の実行が終わると、この再定義されたバージョンは消えてしまう&nbsp;&mdash;&nbsp;この関数はあくまでも<code>build_lookup_tables()</code>のローカルスコープ内で定義されたものなのだ。


en:<li>This line of code will call the redefined <code>to_roman()</code> function, which actually calculates the Roman numeral.
ja:<li>ここでは、再定義した<code>to_roman()</code>関数を呼び出してローマ数字を実際に組み立てている。


en:<li>Once you have the result (from the redefined <code>to_roman()</code> function), you add the integer and its Roman numeral equivalent to both lookup tables.
ja:<li>（再定義した<code>to_roman()</code>関数から）値が返ってきたら、整数と対応するローマ数字の二つを両方の参照テーブルに加えていく。


en:<p>Once the lookup tables are built, the rest of the code is both easy and fast.
ja:<p>参照テーブルができあがってしまえば、後のコードは簡潔で高速なものに仕上がる。


en:<li>After doing the same bounds checking as before, the <code>to_roman()</code> function simply finds the appropriate value in the lookup table and returns it.
ja:<li>前と同じように入力値をチェックしたあとは、<code>to_roman()</code>関数は単に適切な値を参照テーブルから探し出してその値を返すという処理だけを行う。


en:<li>Similarly, the <code>from_roman()</code> function is reduced to some bounds checking and one line of code. No more regular expressions. No more looping. O(1) conversion to and from Roman numerals.
ja:<li>同様に、<code>from_roman()</code>関数も入力値をチェックする部分の他に一行のコードが置かれているだけになっている。ここには正規表現は使われていないし、ループもない。あるのはローマ数字と整数を相互変換するO(1)のコードだけだ。


en:<p>But does it work? Why yes, yes it does. And I can prove it.
ja:<p>これでちゃんと動くのかって？ もちろん、これでちゃんと動く。証明してみせよう。


en:<li>Not that you asked, but it&#8217;s fast, too! Like, almost 10&times; as fast. Of course, it&#8217;s not entirely a fair comparison, because this version takes longer to import (when it builds the lookup tables). But since the import is only done once, the startup cost is amortized over all the calls to the <code>to_roman()</code> and <code>from_roman()</code> functions. Since the tests make several thousand function calls (the roundtrip test alone makes 10,000), this savings adds up in a hurry!
ja:<li>別にあなたは求めていなかったかもしれないが、このコードは処理も速いのだ！ 現に処理速度はほとんど10倍になっている。もちろん、これは完全にフェアな比較とは言えない。このバージョンだと（参照テーブルを作り上げるので）インポートするのに長い時間がかかるからだ。しかし、インポートされるのは一回だけなので、この起動にかかるコストは<code>to_roman()</code>と<code>from_roman()</code>の呼び出しごとに償却されてゆくことになる。このテストは何千回もこれらの関数を呼び出すので（往復テストだけで一万回呼び出している）、この最初のコストはすぐに回収されるのだ！


en:<p>The moral of the story?
ja:<p>このお話の教訓は何かって？


en:<li>Simplicity is a virtue.
ja:<li>単純さは善である。


en:<li>Especially when regular expressions are involved.
ja:<li>特に正規表現が関わってくる時には。


en:<li>Unit tests can give you the confidence to do large-scale refactoring.
ja:<li>ユニットテストは大規模なリファクタリングを行う自信を与えてくれる。


en:<p class=a>&#x2042;
ja:<p class=a>&#x2042;


en:<h2 id=summary>Summary</h2>
ja:<h2 id=summary>まとめ</h2>


en:<p>Unit testing is a powerful concept which, if properly implemented, can both reduce maintenance costs and increase flexibility in any long-term project. It is also important to understand that unit testing is not a panacea, a Magic Problem Solver, or a silver bullet. Writing good test cases is hard, and keeping them up to date takes discipline (especially when customers are screaming for critical bug fixes). Unit testing is not a replacement for other forms of testing, including functional testing, integration testing, and user acceptance testing. But it is feasible, and it does work, and once you&#8217;ve seen it work, you&#8217;ll wonder how you ever got along without it.
ja:<p>ユニットテストは強力なコンセプトで、正しく実行できればどんな長期プロジェクトにおいても、保守にかかるコストを減らし、柔軟性も高めることができる。ただし、ユニットテストは万能薬でも魔法の問題解決機でも銀の弾丸でもないということは理解しておいてほしい。優れたテストケースを書くのは難しいことだし、テストケースをたえず更新していくのには自律心が要る（とりわけ、顧客がクリティカルなバグの修正を求めてわめいている状況では）。加えて、ユニットテストは、機能テストや統合テスト、アセプタンステストなどの他の形式のテストに取って代わるものでもない。しかし、このユニットテストは実行可能な手法で、しかもちゃんと機能してくれるものだ。一度このやり方がうまくいくと分かったら、ユニットテスト無しで今までどうしてやってこれたのだろうといぶかしく思うようになることだろう。


en:<p>These few chapters have covered a lot of ground, and much of it wasn&#8217;t even Python-specific. There are unit testing frameworks for many languages, all of which require you to understand the same basic concepts:
ja:<p>ここまでの数章ではかなり広い話題を扱ってきたが、その多くの部分はPythonに特有なものというわけではなかった。実際に、ユニットテストのフレームワークには様々な言語向けのものが存在するし、そのどれについてもここで述べたのと同じ基本的なコンセプトを理解する必要がある：


en:<li>Designing test cases that are specific, automated, and independent
ja:<li>明確かつ独立であり、しかも自動で実行できるようなテストケースを設計する。


en:<li>Writing test cases <em>before</em> the code they are testing
ja:<li>テストするコードの<em>前に</em>テストケースを書く。


en:<li>Writing tests that test good input and check for proper results
ja:<li>有効な入力値を試して、適切な結果が返ってくるかをチェックするテストを書く。


en:<li>Writing tests that test bad input and check for proper failure responses
ja:<li>有効でない入力値を試して、適切に失敗するかをチェックするテストを書く。


en:<li>Writing and updating test cases to reflect new requirements
ja:<li>新しい要件を反映するように、テストケースを書いたり修正したりする。


en:<li>Refactoring mercilessly to improve performance, scalability, readability, maintainability, or whatever other -ility you&#8217;re lacking
ja:<li>容赦なくリファクタリングを施し、機能性や拡張性、可読性、保守性、あるいは何であれコードに欠けている「～性」を向上させていく。


en:<p class=v><a rel=prev href=unit-testing.html title='back to &#8220;Unit Testing&#8221;'><span class=u>&#x261C;</span></a> <a href=files.html rel=next title='onward to &#8220;Files&#8221;'><span class=u>&#x261E;</span></a>
ja:<p class=v><a rel=prev href=unit-testing.html title='「ユニットテスト」に戻る'><span class=u>&#x261C;</span></a> <a href=files.html rel=next title='「ファイル」へ進む'><span class=u>&#x261E;</span></a>


en:<p class=c>&copy; 2001&ndash;10 <a href=about.html>Mark Pilgrim</a>
ja:<p class=c>&copy; 2001&ndash;10 <a href=about.html>Mark Pilgrim</a>


