en:<p>You are here: <a href=index.html>Home</a> <span class=u>&#8227;</span> <a href=table-of-contents.html#whats-new>Dive Into Python 3</a> <span class=u>&#8227;</span>
ja:<p>現在地: <a href=index.html>ホーム</a> <span class=u>&#8227;</span> <a href=table-of-contents.html#whats-new>Dive Into Python 3</a> <span class=u>&#8227;</span>


en:<title>What's New In Dive Into Python 3</title>
ja:<title>Dive Into Python 3 で新しくなったこと</title>


en:<h1>What&#8217;s New In &#8220;Dive Into Python 3&#8221;</h1>
ja:<h1>&#8220;Dive Into Python 3&#8221; で新しくなったこと</h1>


en:<p><span class=u>&#x275D;</span> Isn&#8217;t this where we came in? <span class=u>&#x275E;</span><br>&mdash; Pink Floyd, The Wall
ja:<p><span class=u>&#x275D;</span> 始まりは、ここから？ <span class=u>&#x275E;</span><br>&mdash; Pink Floyd, The Wall


en:<h2 id=divingin><i>a.k.a.</i> &#8220;the minus level&#8221;</h2>
ja:<h2 id=divingin><i>またの名を</i>「負のレベル」</h2>


en:<p class=f>Are you already a Python programmer? Did you read the original &#8220;<a href=http://diveintopython.org/>Dive Into Python</a>&#8221;, or maybe even buy it on paper? (Thanks!) Are you ready to take the plunge into Python 3? &hellip; If so, read on. (If none of that is true, you&#8217;d be better off <a href=installing-python.html>starting at the beginning</a>.)
ja:<p class=f>すでにPythonのプログラムを書いたことがある？ 前版の「<a href=http://diveintopython.org/>Dive Into Python</a>」を読んだことがある？ ひょっとして書籍版も買ってくれた？（ありがとう！）もうPython 3に飛び込む準備ができているって？ &hellip;&hellip; もしそうなら、この章を読み続けてほしい（まったく当てはまらないのなら、<a href=installing-python.html>最初から始める</a>のが良いだろう）。


en:<p>Python 3 comes with a script called <code>2to3</code>. Learn it. Love it. Use it. <a href=porting-code-to-python-3-with-2to3.html>Porting Code to Python 3 with <code>2to3</code></a> is a reference of all the things that the <code>2to3</code> tool can fix automatically. Since a lot of those things are syntax changes, it&#8217;s a good starting point to learn about a lot of the syntax changes in Python 3. (<code>print</code> is now a function, <code>`x`</code> doesn&#8217;t work, <i class=baa>&amp;</i>c.)
ja:<p>Python 3には<code>2to3</code>というスクリプトが付属している。これを学び、これを愛し、これを使おう。<a href=porting-code-to-python-3-with-2to3.html><code>2to3</code>を使ってコードをPython 3へ移植する</a>は、<code>2to3</code>で自動的に何が修正できるのかを全て集めたレファレンスとなっている。その多くは構文の変更なので（<code>print</code>は今や関数であり、<code>`x`</code>はもう使えない、などなど）、この章はPython 3でなされた多くの構文の変更について学ぶ良い足がかりになる。


en:<p><a href=case-study-porting-chardet-to-python-3.html>Case Study: Porting <code>chardet</code> to Python 3</a> documents my (ultimately successful) effort to port a non-trivial library from Python 2 to Python 3. It may help you; it may not. There&#8217;s a fairly steep learning curve, since you need to kind of understand the library first, so you can understand why it broke and how I fixed it. A lot of the breakage centers around strings. Speaking of which&hellip;
ja:<p><a href=case-study-porting-chardet-to-python-3.html>ケーススタディ: <code>chardet</code>をPython 3へ移植する</a>は、ある程度の規模をもつライブラリを私がPython 2からPython 3へ移植したときの（最終的には成功した）努力の模様を文書にしたものだ。これは皆さんの助けになるかもしれないし、ならないかもしれない。この章を理解するには、始めにこのライブラリのことをそれなりに理解しなければならないため、学習曲線はかなり急なものになるが、その代わりにこのライブラリがなぜPython 3で動かなくなったのか、そしてそれを私がどうやって修正したのかを理解できるようになるだろう。この動かなくなった部分の多くは文字列に関係しているが、文字列といえば&hellip;&hellip;


en:<p>Strings. Whew. Where to start. Python 2 had &#8220;strings&#8221; and &#8220;Unicode strings.&#8221; Python 3 has &#8220;bytes&#8221; and &#8220;strings.&#8221; That is, all strings are now Unicode strings, and if you want to deal with a bag of bytes, you use the new <code>bytes</code> type. Python 3 will <em>never</em> implicitly convert between strings and bytes, so if you&#8217;re not sure which one you have at any given moment, your code will almost certainly break. Read <a href=strings.html>the Strings chapter</a> for more details.
ja:<p>文字列。ふぅ、ここが始まりだ。Python 2には「文字列」と「ユニコード文字列」があったが、Python 3には「バイト列」と「文字列」の二つがある。要するに、今や文字列というのはすべてユニコード文字列であり、バイトのかたまりを扱いたい場合には、新たに導入された<code>bytes</code>型を使うことになる。Python 3は、文字列とバイト列の変換を暗黙には<em>決して行わない</em>ので、扱っているものが文字列なのかそれともバイト列なのかを常にしっかり把握していなければ、コードはほぼ確実に動かないものになるだろう。詳しくは<a href=strings.html>文字列の章</a>を読んでほしい。


en:<p>Bytes vs. strings comes up again and again throughout the book.
ja:<p>バイト列と文字列の違いの問題はこの本を通して何度となく現れる。


en:<li>In <a href=files.html>Files</a>, you&#8217;ll learn the difference between reading files in &#8220;binary&#8221; and &#8220;text&#8221; mode. Reading (and writing!) files in text mode requires an <code>encoding</code> parameter. Some text file methods count characters, but other methods count bytes. If your code assumes that one character == one byte, it <em>will</em> break on multi-byte characters.
ja:<li><a href=files.html>ファイル</a>では、ファイルを読み込むときの「バイナリ」モードと「テキスト」モードの違いについて学ぶ。ファイルをテキストモードで読み込むときは（書き込むときも！）<code>encoding</code>という引数が要求される。テキストファイルのメソッドには、文字数を数えるものもあれば、バイト数を数えるものもある。1文字 == 1バイトと仮定したコードを書こうものなら、多バイト文字を扱う際に<em>ほぼ間違いなく</em>動作しなくなるだろう。


en:<li>In <a href=http-web-services.html><abbr>HTTP</abbr> Web Services</a>, the <code>httplib2</code> module fetches headers and data over <abbr>HTTP</abbr>. <abbr>HTTP</abbr> headers are returned as strings, but the <abbr>HTTP</abbr> body is returned as bytes.
ja:<li><a href=http-web-services.html><abbr>HTTP</abbr>ウェブサービス</a>の章では、<code>httplib2</code>モジュールが<abbr>HTTP</abbr>を介してヘッダとデータを取得する。<abbr>HTTP</abbr>のヘッダは文字列として返されるが、<abbr>HTTP</abbr>の本文はバイトとして返される。


en:<li>In <a href=serializing.html>Serializing Python Objects</a>, you&#8217;ll learn why the <code>pickle</code> module in Python 3 defines a new data format that is backwardly incompatible with Python 2. (Hint: it&#8217;s because of bytes and strings.) Also <abbr>JSON</abbr>, which doesn&#8217;t support the <code>bytes</code> type at all. I&#8217;ll show you how to hack around that.
ja:<li><a href=serializing.html>Pythonオブジェクトをシリアライズする</a>では、Python 3の<code>pickle</code>モジュールが、Python 2との後方互換性を持たない新しいデータ形式を定義している理由について学ぶ（ヒント: これもバイト列と文字列が原因だ）。この章では<abbr>JSON</abbr>という形式も扱うが、これは<code>bytes</code>型をまったくサポートしていない。これをどのような手法で解決するかについても説明する。


en:<li>In <a href=case-study-porting-chardet-to-python-3.html>Case study: porting <code>chardet</code> to Python 3</a>, it&#8217;s just a bloody mess of bytes and strings everywhere.
ja:<li><a href=case-study-porting-chardet-to-python-3.html>ケーススタディ: <code>chardet</code>をPython 3へ移植する</a>の章は、あらゆるところがバイト列と文字列で血まみれになっている。


en:<p>Even if you don&#8217;t care about Unicode (oh but you will), you&#8217;ll want to read about <a href=strings.html#formatting-strings>string formatting in Python 3</a>, which is completely different from Python 2.
ja:<p>Unicodeのことを気にかけていないとしても（でも気にすることになるよ）、<a href=strings.html#formatting-strings>Python 3の文字列フォーマット</a>についての説明は読みたいと思う。これはPython 2からすっかり変わってしまっている。


en:<p>Iterators are everywhere in Python 3, and I understand them a lot better than I did five years ago when I wrote &#8220;Dive Into Python&#8221;. You need to understand them too, because lots of functions that used to return lists in Python 2 will now return iterators in Python 3. At a minimum, you should read <a href=iterators.html#a-fibonacci-iterator>the second half of the Iterators chapter</a> and <a href=advanced-iterators.html#generator-expressions>the second half of the Advanced Iterators chapter</a>.
ja:<p>イテレータはPython 3のいたるところにある。そして、私が五年前に&#8220;Dive Into Python&#8221;を書いていた頃よりも、私はイテレータをずっと良く理解している。皆さんもこれを理解しなければならない。というのは、Python 2においてリストを返していた関数の多くは、Python 3ではイテレータを返すようになっているからだ。少なくとも、<a href=iterators.html#a-fibonacci-iterator>イテレータの章の後半</a>と<a href=advanced-iterators.html#generator-expressions>高度なイテレータの章の後半</a>は読んでほしい。


en:<p>By popular request, I&#8217;ve added an appendix on <a href=special-method-names.html>Special Method Names</a>, which is kind of like <a href=http://www.python.org/doc/3.1/reference/datamodel.html#special-method-names>the Python docs &#8220;Data Model&#8221; chapter</a> but with more snark.
ja:<p>たくさんの要望があったので、<a href=special-method-names.html>特殊メソッド名</a>についてのAppendixを追加することにした。これは<a href=http://www.python.org/doc/3.1/reference/datamodel.html#special-method-names>Python公式ドキュメントの「データモデル」の章</a>のようなものだが、もっと皮肉が効いている。


en:<p>When I was writing &#8220;Dive Into Python&#8221;, all of the available XML libraries sucked. Then Fredrik Lundh wrote <a href=http://effbot.org/zone/element-index.htm>ElementTree</a>, which doesn&#8217;t suck at all. The Python gods wisely <a href=http://docs.python.org/3.1/library/xml.etree.elementtree.html>incorporated ElementTree into the standard library</a>, and now it forms the basis for <a href=xml.html>my new XML chapter</a>. The old ways of parsing XML are still around, but you should avoid them, because they suck!
ja:<p>前版の「Dive Into Python」を書いていた頃に利用できたXMLライブラリはすべてひどいものだった。その後、Fredrik Lundhが<a href=http://effbot.org/zone/element-index.htm>ElementTree</a>というものを作ったのだが、これは良くできた代物だった。Pythonの神々たちは賢明にも<a href=http://docs.python.org/3.1/library/xml.etree.elementtree.html>ElementTreeを標準ライブラリに組み込んだ</a>ので、今やこれが<a href=xml.html>新しいXMLの章</a>の基盤になっている。古いやり方でXMLを扱うこともできるけれど、それはやめたほうが良い。まったくそいつらはひどいものだから！


en:<p>Also new in Python&nbsp;&mdash;&nbsp;not in the language but in the community&nbsp;&mdash;&nbsp;is the emergence of code repositories like <a href=http://pypi.python.org/>The Python Package Index</a> (PyPI). Python comes with utilities to package your code in standard formats and distribute those packages on PyPI. Read <a href=packaging.html>Packaging Python Libraries</a> for details.
ja:<p>そのほかにPythonの世界で新しく起きたこととしては、（言語ではなく、コミュニティに関するものだけど）<a href=http://pypi.python.org/>Python Package Index</a> (PyPI) のようなコードリポジトリの登場が挙げられる。Pythonには、コードを標準形式でパッケージ化し、それをPyPI上で配布するためのユーティリティが付属している。詳しくは<a href=packaging.html>Pythonライブラリをパッケージ化する</a>を読んでほしい。
